/*
 * Harness feature flag analytics service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.harness.cfsdk.cloud.openapi.metric.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.harness.cfsdk.cloud.openapi.metric.model.MetricsData;
import io.harness.cfsdk.cloud.openapi.metric.model.TargetData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.harness.cfsdk.cloud.openapi.metric.JSON;

/**
 * Metrics
 */

public class Metrics {
  public static final String SERIALIZED_NAME_TARGET_DATA = "targetData";
  @SerializedName(SERIALIZED_NAME_TARGET_DATA)
  private List<TargetData> targetData;

  public static final String SERIALIZED_NAME_METRICS_DATA = "metricsData";
  @SerializedName(SERIALIZED_NAME_METRICS_DATA)
  private List<MetricsData> metricsData;

  public Metrics() {
  }

  public Metrics targetData(List<TargetData> targetData) {
    
    this.targetData = targetData;
    return this;
  }

  public Metrics addTargetDataItem(TargetData targetDataItem) {
    if (this.targetData == null) {
      this.targetData = new ArrayList<>();
    }
    this.targetData.add(targetDataItem);
    return this;
  }

   /**
   * Get targetData
   * @return targetData
  **/
  
  public List<TargetData> getTargetData() {
    return targetData;
  }


  public void setTargetData(List<TargetData> targetData) {
    this.targetData = targetData;
  }


  public Metrics metricsData(List<MetricsData> metricsData) {
    
    this.metricsData = metricsData;
    return this;
  }

  public Metrics addMetricsDataItem(MetricsData metricsDataItem) {
    if (this.metricsData == null) {
      this.metricsData = new ArrayList<>();
    }
    this.metricsData.add(metricsDataItem);
    return this;
  }

   /**
   * Get metricsData
   * @return metricsData
  **/
  
  public List<MetricsData> getMetricsData() {
    return metricsData;
  }


  public void setMetricsData(List<MetricsData> metricsData) {
    this.metricsData = metricsData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.targetData, metrics.targetData) &&
        Objects.equals(this.metricsData, metrics.metricsData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetData, metricsData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    targetData: ").append(toIndentedString(targetData)).append("\n");
    sb.append("    metricsData: ").append(toIndentedString(metricsData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("targetData");
    openapiFields.add("metricsData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Metrics
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metrics is not found in the empty JSON string", Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("targetData") != null && !jsonObj.get("targetData").isJsonNull()) {
        JsonArray jsonArraytargetData = jsonObj.getAsJsonArray("targetData");
        if (jsonArraytargetData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetData` to be an array in the JSON string but got `%s`", jsonObj.get("targetData").toString()));
          }

          // validate the optional field `targetData` (array)
          for (int i = 0; i < jsonArraytargetData.size(); i++) {
            TargetData.validateJsonElement(jsonArraytargetData.get(i));
          };
        }
      }
      if (jsonObj.get("metricsData") != null && !jsonObj.get("metricsData").isJsonNull()) {
        JsonArray jsonArraymetricsData = jsonObj.getAsJsonArray("metricsData");
        if (jsonArraymetricsData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricsData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricsData` to be an array in the JSON string but got `%s`", jsonObj.get("metricsData").toString()));
          }

          // validate the optional field `metricsData` (array)
          for (int i = 0; i < jsonArraymetricsData.size(); i++) {
            MetricsData.validateJsonElement(jsonArraymetricsData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<Metrics>() {
           @Override
           public void write(JsonWriter out, Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Metrics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Metrics
  * @throws IOException if the JSON string is invalid with respect to Metrics
  */
  public static Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metrics.class);
  }

 /**
  * Convert an instance of Metrics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

