/*
 * Harness feature flag service client apis
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.harness.cfsdk.cloud.openapi.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.harness.cfsdk.cloud.openapi.client.model.FeatureConfig;
import io.harness.cfsdk.cloud.openapi.client.model.TargetSegment;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.harness.cfsdk.cloud.openapi.client.JSON;

/**
 * ProxyConfigAllOfEnvironments
 */

public class ProxyConfigAllOfEnvironments {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_API_KEYS = "apiKeys";
  @SerializedName(SERIALIZED_NAME_API_KEYS)
  private List<String> apiKeys;

  public static final String SERIALIZED_NAME_FEATURE_CONFIGS = "featureConfigs";
  @SerializedName(SERIALIZED_NAME_FEATURE_CONFIGS)
  private List<FeatureConfig> featureConfigs;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<TargetSegment> segments;

  public ProxyConfigAllOfEnvironments() {
  }

  public ProxyConfigAllOfEnvironments id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ProxyConfigAllOfEnvironments apiKeys(List<String> apiKeys) {
    
    this.apiKeys = apiKeys;
    return this;
  }

  public ProxyConfigAllOfEnvironments addApiKeysItem(String apiKeysItem) {
    if (this.apiKeys == null) {
      this.apiKeys = new ArrayList<>();
    }
    this.apiKeys.add(apiKeysItem);
    return this;
  }

   /**
   * Get apiKeys
   * @return apiKeys
  **/
  
  public List<String> getApiKeys() {
    return apiKeys;
  }


  public void setApiKeys(List<String> apiKeys) {
    this.apiKeys = apiKeys;
  }


  public ProxyConfigAllOfEnvironments featureConfigs(List<FeatureConfig> featureConfigs) {
    
    this.featureConfigs = featureConfigs;
    return this;
  }

  public ProxyConfigAllOfEnvironments addFeatureConfigsItem(FeatureConfig featureConfigsItem) {
    if (this.featureConfigs == null) {
      this.featureConfigs = new ArrayList<>();
    }
    this.featureConfigs.add(featureConfigsItem);
    return this;
  }

   /**
   * Get featureConfigs
   * @return featureConfigs
  **/
  
  public List<FeatureConfig> getFeatureConfigs() {
    return featureConfigs;
  }


  public void setFeatureConfigs(List<FeatureConfig> featureConfigs) {
    this.featureConfigs = featureConfigs;
  }


  public ProxyConfigAllOfEnvironments segments(List<TargetSegment> segments) {
    
    this.segments = segments;
    return this;
  }

  public ProxyConfigAllOfEnvironments addSegmentsItem(TargetSegment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

   /**
   * Get segments
   * @return segments
  **/
  
  public List<TargetSegment> getSegments() {
    return segments;
  }


  public void setSegments(List<TargetSegment> segments) {
    this.segments = segments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyConfigAllOfEnvironments proxyConfigAllOfEnvironments = (ProxyConfigAllOfEnvironments) o;
    return Objects.equals(this.id, proxyConfigAllOfEnvironments.id) &&
        Objects.equals(this.apiKeys, proxyConfigAllOfEnvironments.apiKeys) &&
        Objects.equals(this.featureConfigs, proxyConfigAllOfEnvironments.featureConfigs) &&
        Objects.equals(this.segments, proxyConfigAllOfEnvironments.segments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, apiKeys, featureConfigs, segments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyConfigAllOfEnvironments {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    apiKeys: ").append(toIndentedString(apiKeys)).append("\n");
    sb.append("    featureConfigs: ").append(toIndentedString(featureConfigs)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("apiKeys");
    openapiFields.add("featureConfigs");
    openapiFields.add("segments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProxyConfigAllOfEnvironments
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProxyConfigAllOfEnvironments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProxyConfigAllOfEnvironments is not found in the empty JSON string", ProxyConfigAllOfEnvironments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProxyConfigAllOfEnvironments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProxyConfigAllOfEnvironments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("apiKeys") != null && !jsonObj.get("apiKeys").isJsonNull() && !jsonObj.get("apiKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeys` to be an array in the JSON string but got `%s`", jsonObj.get("apiKeys").toString()));
      }
      if (jsonObj.get("featureConfigs") != null && !jsonObj.get("featureConfigs").isJsonNull()) {
        JsonArray jsonArrayfeatureConfigs = jsonObj.getAsJsonArray("featureConfigs");
        if (jsonArrayfeatureConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("featureConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `featureConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("featureConfigs").toString()));
          }

          // validate the optional field `featureConfigs` (array)
          for (int i = 0; i < jsonArrayfeatureConfigs.size(); i++) {
            FeatureConfig.validateJsonElement(jsonArrayfeatureConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            TargetSegment.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProxyConfigAllOfEnvironments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProxyConfigAllOfEnvironments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProxyConfigAllOfEnvironments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProxyConfigAllOfEnvironments.class));

       return (TypeAdapter<T>) new TypeAdapter<ProxyConfigAllOfEnvironments>() {
           @Override
           public void write(JsonWriter out, ProxyConfigAllOfEnvironments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProxyConfigAllOfEnvironments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProxyConfigAllOfEnvironments given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProxyConfigAllOfEnvironments
  * @throws IOException if the JSON string is invalid with respect to ProxyConfigAllOfEnvironments
  */
  public static ProxyConfigAllOfEnvironments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProxyConfigAllOfEnvironments.class);
  }

 /**
  * Convert an instance of ProxyConfigAllOfEnvironments to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

