/*
 * Harness feature flag service client apis
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.harness.cfsdk.cloud.openapi.client.api;

import io.harness.cfsdk.cloud.openapi.client.ApiCallback;
import io.harness.cfsdk.cloud.openapi.client.ApiClient;
import io.harness.cfsdk.cloud.openapi.client.ApiException;
import io.harness.cfsdk.cloud.openapi.client.ApiResponse;
import io.harness.cfsdk.cloud.openapi.client.Configuration;
import io.harness.cfsdk.cloud.openapi.client.Pair;
import io.harness.cfsdk.cloud.openapi.client.ProgressRequestBody;
import io.harness.cfsdk.cloud.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.harness.cfsdk.cloud.openapi.client.model.AuthenticationRequest;
import io.harness.cfsdk.cloud.openapi.client.model.AuthenticationResponse;
import io.harness.cfsdk.cloud.openapi.client.model.Error;
import io.harness.cfsdk.cloud.openapi.client.model.Evaluation;
import io.harness.cfsdk.cloud.openapi.client.model.FeatureConfig;
import io.harness.cfsdk.cloud.openapi.client.model.Segment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authenticate
     * @param authenticationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateCall(AuthenticationRequest authenticationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationRequest;

        // create path and map variables
        String localVarPath = "/client/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticateValidateBeforeCall(AuthenticationRequest authenticationRequest, final ApiCallback _callback) throws ApiException {
        return authenticateCall(authenticationRequest, _callback);

    }

    /**
     * Authenticate with the admin server.
     * Used to retrieve all target segments for certain account id.
     * @param authenticationRequest  (optional)
     * @return AuthenticationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationResponse authenticate(AuthenticationRequest authenticationRequest) throws ApiException {
        ApiResponse<AuthenticationResponse> localVarResp = authenticateWithHttpInfo(authenticationRequest);
        return localVarResp.getData();
    }

    /**
     * Authenticate with the admin server.
     * Used to retrieve all target segments for certain account id.
     * @param authenticationRequest  (optional)
     * @return ApiResponse&lt;AuthenticationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationResponse> authenticateWithHttpInfo(AuthenticationRequest authenticationRequest) throws ApiException {
        okhttp3.Call localVarCall = authenticateValidateBeforeCall(authenticationRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate with the admin server. (asynchronously)
     * Used to retrieve all target segments for certain account id.
     * @param authenticationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateAsync(AuthenticationRequest authenticationRequest, final ApiCallback<AuthenticationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticateValidateBeforeCall(authenticationRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllSegments
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSegmentsCall(String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/target-segments"
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSegmentsValidateBeforeCall(String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getAllSegments(Async)");
        }

        return getAllSegmentsCall(environmentUUID, cluster, _callback);

    }

    /**
     * Retrieve all segments.
     * Used to retrieve all segments for certain account id.
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return List&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Segment> getAllSegments(String environmentUUID, String cluster) throws ApiException {
        ApiResponse<List<Segment>> localVarResp = getAllSegmentsWithHttpInfo(environmentUUID, cluster);
        return localVarResp.getData();
    }

    /**
     * Retrieve all segments.
     * Used to retrieve all segments for certain account id.
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;List&lt;Segment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Segment>> getAllSegmentsWithHttpInfo(String environmentUUID, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getAllSegmentsValidateBeforeCall(environmentUUID, cluster, null);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all segments. (asynchronously)
     * Used to retrieve all segments for certain account id.
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSegmentsAsync(String environmentUUID, String cluster, final ApiCallback<List<Segment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSegmentsValidateBeforeCall(environmentUUID, cluster, _callback);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvaluationByIdentifier
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param feature Unique identifier for the flag object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationByIdentifierCall(String environmentUUID, String feature, String target, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/target/{target}/evaluations/{feature}"
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()))
            .replace("{" + "feature" + "}", localVarApiClient.escapeString(feature.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvaluationByIdentifierValidateBeforeCall(String environmentUUID, String feature, String target, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getEvaluationByIdentifier(Async)");
        }

        // verify the required parameter 'feature' is set
        if (feature == null) {
            throw new ApiException("Missing the required parameter 'feature' when calling getEvaluationByIdentifier(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling getEvaluationByIdentifier(Async)");
        }

        return getEvaluationByIdentifierCall(environmentUUID, feature, target, cluster, _callback);

    }

    /**
     * Get feature evaluations for target
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param feature Unique identifier for the flag object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return Evaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Evaluation getEvaluationByIdentifier(String environmentUUID, String feature, String target, String cluster) throws ApiException {
        ApiResponse<Evaluation> localVarResp = getEvaluationByIdentifierWithHttpInfo(environmentUUID, feature, target, cluster);
        return localVarResp.getData();
    }

    /**
     * Get feature evaluations for target
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param feature Unique identifier for the flag object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;Evaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Evaluation> getEvaluationByIdentifierWithHttpInfo(String environmentUUID, String feature, String target, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getEvaluationByIdentifierValidateBeforeCall(environmentUUID, feature, target, cluster, null);
        Type localVarReturnType = new TypeToken<Evaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get feature evaluations for target (asynchronously)
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param feature Unique identifier for the flag object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationByIdentifierAsync(String environmentUUID, String feature, String target, String cluster, final ApiCallback<Evaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvaluationByIdentifierValidateBeforeCall(environmentUUID, feature, target, cluster, _callback);
        Type localVarReturnType = new TypeToken<Evaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvaluations
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationsCall(String environmentUUID, String target, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/target/{target}/evaluations"
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvaluationsValidateBeforeCall(String environmentUUID, String target, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getEvaluations(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling getEvaluations(Async)");
        }

        return getEvaluationsCall(environmentUUID, target, cluster, _callback);

    }

    /**
     * Get feature evaluations for target
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return List&lt;Evaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Evaluation> getEvaluations(String environmentUUID, String target, String cluster) throws ApiException {
        ApiResponse<List<Evaluation>> localVarResp = getEvaluationsWithHttpInfo(environmentUUID, target, cluster);
        return localVarResp.getData();
    }

    /**
     * Get feature evaluations for target
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;List&lt;Evaluation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Evaluation>> getEvaluationsWithHttpInfo(String environmentUUID, String target, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getEvaluationsValidateBeforeCall(environmentUUID, target, cluster, null);
        Type localVarReturnType = new TypeToken<List<Evaluation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get feature evaluations for target (asynchronously)
     * 
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param target Unique identifier for the target object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationsAsync(String environmentUUID, String target, String cluster, final ApiCallback<List<Evaluation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvaluationsValidateBeforeCall(environmentUUID, target, cluster, _callback);
        Type localVarReturnType = new TypeToken<List<Evaluation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeatureConfig
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureConfigCall(String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/feature-configs"
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureConfigValidateBeforeCall(String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getFeatureConfig(Async)");
        }

        return getFeatureConfigCall(environmentUUID, cluster, _callback);

    }

    /**
     * Get all feature flags activations
     * All feature flags with activations in project environment
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return List&lt;FeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<FeatureConfig> getFeatureConfig(String environmentUUID, String cluster) throws ApiException {
        ApiResponse<List<FeatureConfig>> localVarResp = getFeatureConfigWithHttpInfo(environmentUUID, cluster);
        return localVarResp.getData();
    }

    /**
     * Get all feature flags activations
     * All feature flags with activations in project environment
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;List&lt;FeatureConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeatureConfig>> getFeatureConfigWithHttpInfo(String environmentUUID, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getFeatureConfigValidateBeforeCall(environmentUUID, cluster, null);
        Type localVarReturnType = new TypeToken<List<FeatureConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all feature flags activations (asynchronously)
     * All feature flags with activations in project environment
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureConfigAsync(String environmentUUID, String cluster, final ApiCallback<List<FeatureConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureConfigValidateBeforeCall(environmentUUID, cluster, _callback);
        Type localVarReturnType = new TypeToken<List<FeatureConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeatureConfigByIdentifier
     * @param identifier Unique identifier for the flag object in the API. (required)
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureConfigByIdentifierCall(String identifier, String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/feature-configs/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureConfigByIdentifierValidateBeforeCall(String identifier, String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getFeatureConfigByIdentifier(Async)");
        }

        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getFeatureConfigByIdentifier(Async)");
        }

        return getFeatureConfigByIdentifierCall(identifier, environmentUUID, cluster, _callback);

    }

    /**
     * Get feature config
     * 
     * @param identifier Unique identifier for the flag object in the API. (required)
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return FeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeatureConfig getFeatureConfigByIdentifier(String identifier, String environmentUUID, String cluster) throws ApiException {
        ApiResponse<FeatureConfig> localVarResp = getFeatureConfigByIdentifierWithHttpInfo(identifier, environmentUUID, cluster);
        return localVarResp.getData();
    }

    /**
     * Get feature config
     * 
     * @param identifier Unique identifier for the flag object in the API. (required)
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;FeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeatureConfig> getFeatureConfigByIdentifierWithHttpInfo(String identifier, String environmentUUID, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getFeatureConfigByIdentifierValidateBeforeCall(identifier, environmentUUID, cluster, null);
        Type localVarReturnType = new TypeToken<FeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get feature config (asynchronously)
     * 
     * @param identifier Unique identifier for the flag object in the API. (required)
     * @param environmentUUID Unique identifier for the environment object in the API. (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureConfigByIdentifierAsync(String identifier, String environmentUUID, String cluster, final ApiCallback<FeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureConfigByIdentifierValidateBeforeCall(identifier, environmentUUID, cluster, _callback);
        Type localVarReturnType = new TypeToken<FeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSegmentByIdentifier
     * @param identifier Unique identifier for the segment object in the API (required)
     * @param environmentUUID Unique identifier for the environment object in the API (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSegmentByIdentifierCall(String identifier, String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/client/env/{environmentUUID}/target-segments/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()))
            .replace("{" + "environmentUUID" + "}", localVarApiClient.escapeString(environmentUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentByIdentifierValidateBeforeCall(String identifier, String environmentUUID, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getSegmentByIdentifier(Async)");
        }

        // verify the required parameter 'environmentUUID' is set
        if (environmentUUID == null) {
            throw new ApiException("Missing the required parameter 'environmentUUID' when calling getSegmentByIdentifier(Async)");
        }

        return getSegmentByIdentifierCall(identifier, environmentUUID, cluster, _callback);

    }

    /**
     * Retrieve a segment by identifier
     * Used to retrieve a segment for a certain account id by identifier
     * @param identifier Unique identifier for the segment object in the API (required)
     * @param environmentUUID Unique identifier for the environment object in the API (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Segment getSegmentByIdentifier(String identifier, String environmentUUID, String cluster) throws ApiException {
        ApiResponse<Segment> localVarResp = getSegmentByIdentifierWithHttpInfo(identifier, environmentUUID, cluster);
        return localVarResp.getData();
    }

    /**
     * Retrieve a segment by identifier
     * Used to retrieve a segment for a certain account id by identifier
     * @param identifier Unique identifier for the segment object in the API (required)
     * @param environmentUUID Unique identifier for the environment object in the API (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> getSegmentByIdentifierWithHttpInfo(String identifier, String environmentUUID, String cluster) throws ApiException {
        okhttp3.Call localVarCall = getSegmentByIdentifierValidateBeforeCall(identifier, environmentUUID, cluster, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a segment by identifier (asynchronously)
     * Used to retrieve a segment for a certain account id by identifier
     * @param identifier Unique identifier for the segment object in the API (required)
     * @param environmentUUID Unique identifier for the environment object in the API (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSegmentByIdentifierAsync(String identifier, String environmentUUID, String cluster, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentByIdentifierValidateBeforeCall(identifier, environmentUUID, cluster, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stream
     * @param apIKey  (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamCall(String apIKey, String cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        if (apIKey != null) {
            localVarHeaderParams.put("API-Key", localVarApiClient.parameterToString(apIKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamValidateBeforeCall(String apIKey, String cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apIKey' is set
        if (apIKey == null) {
            throw new ApiException("Missing the required parameter 'apIKey' when calling stream(Async)");
        }

        return streamCall(apIKey, cluster, _callback);

    }

    /**
     * Stream endpoint.
     * 
     * @param apIKey  (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void stream(String apIKey, String cluster) throws ApiException {
        streamWithHttpInfo(apIKey, cluster);
    }

    /**
     * Stream endpoint.
     * 
     * @param apIKey  (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamWithHttpInfo(String apIKey, String cluster) throws ApiException {
        okhttp3.Call localVarCall = streamValidateBeforeCall(apIKey, cluster, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stream endpoint. (asynchronously)
     * 
     * @param apIKey  (required)
     * @param cluster Unique identifier for the cluster for the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamAsync(String apIKey, String cluster, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamValidateBeforeCall(apIKey, cluster, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
