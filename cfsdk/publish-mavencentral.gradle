apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}


ext {
    PUBLISH_GROUP_ID = "io.harness"
    PUBLISH_ARTIFACT_ID = "ff-android-client-sdk"
    PUBLISH_VERSION = "1.1.2"
}


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
}


ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')


publishing {
    publications  {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }

            artifact androidSourcesJar
            artifact androidJavadocsJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'This is the official Android SDK for Harness Feature Flags Service'
                url = 'https://github.com/harness/ff-android-client-sdk'
                licenses {
                    license {
                        name = 'Apache-2.0 License'
                        url = 'https://github.com/harness/ff-android-client-sdk/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'rushabh-harness'
                        name = 'Rushabh Shah'
                        email = 'rushabh@harness.io'
                    }
                    developer {
                        id = 'tanovicstef92'
                        name = 'Stefan Tanovic'
                        email = 'stefan.tanovic@harness.io'
                    }
                    developer {
                        id = 'milos85vasic-harness'
                        name = 'Milos Vasic'
                        email = 'milos.vasic@harness.io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/harness/ff-android-client-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/harness/ff-android-client-sdk.git'
                    url = 'https://github.com/harness/ff-android-client-sdk/tree/main'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = PUBLISH_VERSION.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}


signing {
    sign publishing.publications
}
